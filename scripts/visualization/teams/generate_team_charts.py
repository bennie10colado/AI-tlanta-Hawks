# RF8, RF9, RF10 - PROJ 1
import pandas as pd
import matplotlib.pyplot as plt
import os
import plotly.express as px
import plotly.graph_objects as go

def generate_team_charts():
    """Gera e salva os gr√°ficos de desempenho da equipe para exibi√ß√£o no Streamlit."""
    for season in ["2023-24", "2024-25"]:
        file_path = f"data/team_stats_{season}.csv"
        output_dir = f"data/graphs/{season}"
        os.makedirs(output_dir, exist_ok=True)

        try:
            if not os.path.exists(file_path):
                raise FileNotFoundError(f"üö® O arquivo {file_path} n√£o foi encontrado!")

            df = pd.read_csv(file_path)

            print(f"üìä Colunas dispon√≠veis no dataset {season}: {df.columns.tolist()}")

            # Garantir que as colunas necess√°rias existem e s√£o num√©ricas
            colunas = ["Vit√≥rias Casa", "Vit√≥rias Fora", "Derrotas Casa", "Derrotas Fora"]
            df[colunas] = df[colunas].apply(pd.to_numeric, errors="coerce").fillna(0)

            total_vitorias = df["Vit√≥rias Casa"].sum() + df["Vit√≥rias Fora"].sum()
            total_derrotas = df["Derrotas Casa"].sum() + df["Derrotas Fora"].sum()

            ## ‚úÖ 1. Gr√°fico de Barras Empilhado (Vit√≥rias x Derrotas)
            plt.figure(figsize=(8, 6))
            categorias = ["Vit√≥rias", "Derrotas"]
            valores = [total_vitorias, total_derrotas]
            plt.bar(categorias, valores, color=["green", "red"])
            plt.title(f"Vit√≥rias e Derrotas - {season}")
            plt.ylabel("Quantidade")
            plt.savefig(f"{output_dir}/barras_empilhado.png")
            plt.close()

            ## ‚úÖ 2. Gr√°fico de Barras Agrupado (Casa e Fora)
            plt.figure(figsize=(8, 6))
            valores_casa_fora = [df[col].sum() for col in colunas]
            plt.bar(colunas, valores_casa_fora, color=["green", "blue", "red", "brown"])
            plt.title(f"Vit√≥rias e Derrotas (Casa/Fora) - {season}")
            plt.ylabel("Quantidade")
            plt.savefig(f"{output_dir}/barras_agrupado.png")
            plt.close()

            ## ‚úÖ 3. Gr√°fico de Histograma
            plt.figure(figsize=(8, 6))
            plt.hist([total_vitorias, total_derrotas], bins=2, color=["green", "red"], alpha=0.7, label=["Vit√≥rias", "Derrotas"])
            plt.title(f"Frequ√™ncia de Vit√≥rias e Derrotas - {season}")
            plt.xlabel("Quantidade")
            plt.ylabel("Frequ√™ncia")
            plt.legend()
            plt.savefig(f"{output_dir}/histograma.png")
            plt.close()

            ## ‚úÖ 4. Gr√°fico de Pizza
            labels = colunas
            values = [df[col].sum() for col in colunas]
            fig_pizza = px.pie(
                names=labels,
                values=values,
                title=f"Distribui√ß√£o de Jogos - {season}",
                color=labels,
                color_discrete_map={
                    "Vit√≥rias Casa": "green",
                    "Vit√≥rias Fora": "blue",
                    "Derrotas Casa": "red",
                    "Derrotas Fora": "brown"
                }
            )
            fig_pizza.write_html(f"{output_dir}/pizza.html")

            ## ‚úÖ 5. Gr√°fico de Radar (Pontos Casa/Fora)
            categorias = ["Vit√≥rias Casa", "Derrotas Casa", "Vit√≥rias Fora", "Derrotas Fora"]
            valores = [df["Vit√≥rias Casa"].sum(), df["Derrotas Casa"].sum(), df["Vit√≥rias Fora"].sum(), df["Derrotas Fora"].sum()]
            fig_radar = go.Figure()
            fig_radar.add_trace(go.Scatterpolar(r=valores, theta=categorias, fill="toself", name="Atlanta Hawks"))
            fig_radar.update_layout(title=f"Desempenho de Pontua√ß√£o - {season}", polar=dict(radialaxis=dict(visible=True)))
            fig_radar.write_html(f"{output_dir}/radar.html")

            ## ‚úÖ 6. Gr√°fico de Linhas (Sequ√™ncia de Vit√≥rias e Derrotas)
            df_games = pd.read_csv(f"data/games_summary_{season}.csv")
            df_games["Placar Atlanta Hawks"] = pd.to_numeric(df_games["Placar Atlanta Hawks"], errors="coerce")
            df_games["Placar Advers√°rio"] = pd.to_numeric(df_games["Placar Advers√°rio"], errors="coerce")
            df_games["Resultado"] = df_games["Placar Atlanta Hawks"] - df_games["Placar Advers√°rio"]

            plt.figure(figsize=(10, 6))
            plt.plot(df_games["Data do Jogo"], df_games["Resultado"], marker="o", linestyle="-", color="blue", label="Diferen√ßa de Pontos")
            plt.axhline(y=0, color="red", linestyle="--", label="Empate")
            plt.xlabel("Data")
            plt.ylabel("Diferen√ßa de Pontos")
            plt.title(f"Sequ√™ncia de Vit√≥rias e Derrotas - {season}")
            plt.legend()
            plt.xticks(rotation=45)
            plt.savefig(f"{output_dir}/sequencia.png")
            plt.close()

            ## ‚úÖ 7. Gr√°fico de Dispers√£o - Pontos Marcados vs. Sofridos
            fig_disp = px.scatter(
                df_games,
                x="Placar Atlanta Hawks",
                y="Placar Advers√°rio",
                title=f"Pontos Marcados vs. Pontos Sofridos - {season}",
                labels={"Placar Atlanta Hawks": "Pontos Hawks", "Placar Advers√°rio": "Pontos Advers√°rio"},
                color_discrete_sequence=["blue"]
            )
            fig_disp.write_html(f"{output_dir}/dispersao.html")

            print(f"‚úÖ Gr√°ficos gerados e salvos para {season}!")

        except Exception as e:
            print(f"‚ùå Erro ao gerar gr√°ficos para {season}: {e}")

if __name__ == "__main__":
    generate_team_charts()

import time
import os
import logging
import streamlit as st
from scripts.visualization.players.player_dashboard import start_player_dashboard

# ImportaÃ§Ã£o dos mÃ³dulos de engenharia de dados
from scripts.data_engineering.fetch_nba_players import fetch_nba_players
from scripts.data_engineering.fetch_player_game_logs import fetch_player_game_logs
from scripts.data_engineering.fetch_game_logs import load_game_logs

# ImportaÃ§Ã£o dos mÃ³dulos de anÃ¡lise de dados
from scripts.analysis.players.analyze_player_performance import analyze_player_statistics
from scripts.analysis.players.analyze_player_career import fetch_player_career_stats
from scripts.data_engineering.filter_player_games import filter_player_games

# ImportaÃ§Ã£o dos mÃ³dulos de visualizaÃ§Ã£o
from scripts.visualization.players.generate_player_charts import generate_player_charts

os.makedirs("logs", exist_ok=True)
logging.basicConfig(
    filename="logs/errors.log", 
    level=logging.ERROR, 
    format="%(asctime)s - %(levelname)s - %(message)s"
)

def executar_modulo(nome, funcao):
    """Executa uma funÃ§Ã£o de um mÃ³dulo e captura erros"""
    print(f"\nðŸš€ Iniciando {nome}...\n")
    try:
        funcao()
        time.sleep(1)
        print(f"âœ… {nome} concluÃ­do com sucesso!\n")
    except Exception as e:
        print(f"âš  Erro ao executar {nome}: {e}")
        logging.error(f"Erro ao executar {nome}: {e}")

if __name__ == "__main__":
    print("ðŸŽ¯ Iniciando Pipeline de Processamento dos Jogadores da NBA...\n")

    # ðŸš€ 1. Data Engineering
    executar_modulo("Coleta de Jogadores do Atlanta Hawks (RF1)", fetch_nba_players)
    executar_modulo("Coleta de EstatÃ­sticas de Jogos dos Jogadores (RF2)", fetch_player_game_logs)

    # ðŸš€ 2. AnÃ¡lise de Dados
    executar_modulo("Filtragem de Jogos EspecÃ­ficos (RF3)", lambda: filter_player_games(season="2024-25"))

    executar_modulo("Jogos dentro e fora de casa (RF4)", lambda: load_game_logs(season="2024-25"))

    executar_modulo("AnÃ¡lise EstatÃ­stica dos Jogadores (RF5 - RF8)", lambda: analyze_player_statistics(season="2024-25"))
    executar_modulo("ComparaÃ§Ã£o de EstatÃ­sticas de Carreira (RF9, RF10)", lambda: fetch_player_career_stats(season="2024-25"))

    # ðŸš€ 3. GeraÃ§Ã£o de GrÃ¡ficos
    executar_modulo("GeraÃ§Ã£o de GrÃ¡ficos de Desempenho dos Jogadores (RF10)", lambda: generate_player_charts(season="2024-25"))

    # ðŸš€ 4. Inicializar Dashboard com Streamlit
    print("\nâœ… Pipeline concluÃ­do com sucesso! ðŸŽ‰")
    print("ðŸ–¥ Iniciando o Dashboard...\n")

    os.system("streamlit run scripts/visualization/players/player_dashboard.py")
